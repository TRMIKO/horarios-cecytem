{
  "_from": "vue-async-data@^1.0.2",
  "_id": "vue-async-data@1.0.2",
  "_inBundle": false,
  "_integrity": "sha1-rgppMPbgv5WfEvA9Fh9cN18rBRk=",
  "_location": "/vue-async-data",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "vue-async-data",
    "fetchSpec": "^1.0.2",
    "name": "vue-async-data",
    "raw": "vue-async-data@^1.0.2",
    "rawSpec": "^1.0.2",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/vue-async-data/-/vue-async-data-1.0.2.tgz",
  "_shasum": "ae0a6930f6e0bf959f12f03d161f5c375f2b0519",
  "_spec": "vue-async-data@^1.0.2",
  "_where": "/home/arturo/Documentos/horarios-cecytem",
  "author": {
    "name": "Evan You"
  },
  "bugs": {
    "url": "https://github.com/vuejs/vue-async-data/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "async data loading plugin for Vue.js",
  "devDependencies": {
    "vue": "github:yyx990803/vue#dev"
  },
  "homepage": "https://github.com/vuejs/vue-async-data#readme",
  "keywords": [
    "vue"
  ],
  "license": "MIT",
  "main": "vue-async-data.js",
  "name": "vue-async-data",
  "optionalDependencies": {},
  "readme": "# vue-async-data\n\n> Async data loading plugin for Vue.js\n\n### Install\n\n``` bash\nnpm install vue-async-data\n```\n\n### Usage\n\n``` js\n// assuming CommonJS\nvar Vue = require('vue')\nvar VueAsyncData = require('vue-async-data')\n\n// use globally\n// you can also just use `VueAsyncData.mixin` where needed\nVue.use(VueAsyncData)\n```\n\nThen, in your component options, provide an `asyncData` function:\n\n``` js\nVue.component('example', {\n  data: function {\n    return {\n      msg: 'not loaded yet...'\n    }\n  },\n  asyncData: function (resolve, reject) {\n    // load data and call resolve(data)\n    // or call reject(reason) if something goes wrong\n    setTimeout(function () {\n      // this will call `vm.$set('msg', 'hi')` for you\n      resolve({\n        msg: 'hi'\n      })\n    }, 1000)\n  }\n})\n```\n\n#### Promise\n\nYou can also return a promise that resolves to the data to be set (plays well with [vue-resource](https://github.com/vuejs/vue-resource)):\n\n``` js\nVue.component('example', {\n  // ...\n  asyncData: function () {\n    var self = this\n    return someServiceThatReturnsPromise.get(12345)\n      .then(function (msg) {\n        // returning this as the Promise's resolve value\n        // will call `vm.$set('msg', msg)` for you\n        return {\n          msg: msg\n        }\n        // or, set it yourself:\n        // self.msg = msg\n      })\n  }\n})\n```\n\nParallel fetching with `Promise.all` and ES6:\n\n``` js\nVue.component('example', {\n  // ...\n  asyncData() {\n    return Promise.all([\n      serviceA.get(123),\n      serviceB.get(234)\n    ]).then(([a, b]) => ({a, b}))\n  }\n})\n```\n\n#### Reloading Data\n\nThe component also gets a method named `reloadAsyncData`, which obviously reloads the data:\n\n``` js\nVue.component('example', {\n  // ...\n  asyncData() {\n    // load data based on `this.params`\n  },\n  // reload when params change\n  watch: {\n    params: 'reloadAsyncData'\n  }\n})\n```\n\n#### Loading State\n\nYour component automatically gets a `$loadingAsyncData` meta property, which allows you to display a loading state before the data is loaded:\n\n``` html\n<div v-if=\"$loadingAsyncData\">Loading...</div>\n<div v-if=\"!$loadingAsyncData\">Loaded. Put your real content here.</div>\n```\n\nOr, if you prefer to wait until data loaded to display the component, you can use `wait-for` to listen for the `async-data` event, which is automatically emitted when the data is loaded:\n\n``` html\n<example wait-for=\"async-data\"></example>\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuejs/vue-async-data.git"
  },
  "scripts": {
    "dev": "webpack --watch example/example.js example/example.build.js"
  },
  "version": "1.0.2"
}
